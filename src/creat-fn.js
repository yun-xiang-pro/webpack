export const creatFn = () => {

}
// 1.函数声明
function fn (a,b) {
    return a+b
}
// 2.函数表达式
const fn = function(a,b) {
    return a-b
}
// 3.箭头函数
const fn = (a,b) => {
    return a*b
}
// 4.方法定义
const obj = {
    fn1:function(a,b) {
        return a/b

    },
    fn2(a,b) {
        return a%b
    }
}
// 5.立即执行函数表达式（IIFE）
(function() {
    console.log('立即执行函数')

})()

// 6.构造函数
function Fn (name, age) {
    this.name = name;
    this.age = age;
}
const  f = new Fn('小明', 18)

// 如何创建一个好的函数
// 1.短小
// 函数的第一条规则就是要短小，第二条规则还是要短小。
// 函数的行数应小于20行，每行的字符应该不超过80个。
// 2.只做一件事
// 函数应该只做一件事。做好这件事。只做这一件事。
// 判断函数是否只做了一件事，就是要看他是否能再拆出来一个函数。
// 3.函数名要具有描述性
// 定义函数名要从函数名上就可以看出这个函数要做什么事。
//  函数名要用动词开头+名称
// 4.函数参数
// 最理想的参数数量是0，其次是1，再次是2，避免使用三个参数。如果参数多于两个，那么测试很难会覆盖所有可能的值。
// 如果确实需要3个或者三个以上，那么其中一些参数就应该封装成一个对象了。
// 5.无副作用
// 函数只做一件事，但有时候还是会做其他被隐藏起来的事，他会是你的代码发生变数，变得不可控。
// 6. 不要重复
// 将重复的代码进行抽离封装，进行调用，使其可以重复利用。
